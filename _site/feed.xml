<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>远方有多远,请你告诉我!</description>
    <link>http://www.idearfree.com/</link>
    <atom:link href="http://www.idearfree.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 04 Nov 2017 20:04:30 +0800</pubDate>
    <lastBuildDate>Sat, 04 Nov 2017 20:04:30 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>GitHub博客上传</title>
        <description>
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;由于总是忘记怎么把电脑里的文件上传到博客仓库写的.把它记下来防止忘记;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;jekyll server&lt;/code&gt;查看本地博客效果&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git status&lt;/code&gt;擦看本地自己修改了多少文件&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git add .&lt;/code&gt;添加远程不存才的git文件&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git commit -m &quot;maste&quot;&lt;/code&gt;提交修改&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;从另一个存储库或本地分支获取并集成(整合)&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git push&lt;/code&gt;跟进到远程服务器上&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git rm&lt;/code&gt;移除文件&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 04 Nov 2017 19:30:01 +0800</pubDate>
        <link>http://www.idearfree.com/helloblog/2017/11/04/GitHub%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0.html</link>
        <guid isPermaLink="true">http://www.idearfree.com/helloblog/2017/11/04/GitHub%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0.html</guid>
        
        <category>HelloBlog</category>
        
        
        <category>HelloBlog</category>
        
      </item>
    
      <item>
        <title>Ubuntu图形界面卡死</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#ubuntu&quot; id=&quot;markdown-toc-ubuntu&quot;&gt;Ubuntu图形界面卡死&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ubuntu&quot;&gt;Ubuntu图形界面卡死&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Control + shift + 1,2,3,4,5,6进入字符界面&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;ps用于查看系统进程&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;kill用于向进程发送强行终止信号&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;查看tty7图形界面进程id&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;ps -t tty7&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;用Kill来杀死进程&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;kill pid&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 04 Nov 2017 19:18:00 +0800</pubDate>
        <link>http://www.idearfree.com/linux/2017/11/04/%E7%B3%BB%E7%BB%9F%E5%8D%A1%E6%AD%BB.html</link>
        <guid isPermaLink="true">http://www.idearfree.com/linux/2017/11/04/%E7%B3%BB%E7%BB%9F%E5%8D%A1%E6%AD%BB.html</guid>
        
        <category>Linux</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>JDBC连接数据库</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#jdbc&quot; id=&quot;markdown-toc-jdbc&quot;&gt;1.加载JDBC驱动程序&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jdbcurl&quot; id=&quot;markdown-toc-jdbcurl&quot;&gt;2.提供JDBC连接的URL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;3、创建数据库的连接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#statement&quot; id=&quot;markdown-toc-statement&quot;&gt;4、创建一个Statement&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sql&quot; id=&quot;markdown-toc-sql&quot;&gt;5、执行SQL语句&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;6、处理结果&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jdbc-1&quot; id=&quot;markdown-toc-jdbc-1&quot;&gt;7、关闭JDBC对象&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jdbc&quot;&gt;1.加载JDBC驱动程序&lt;/h3&gt;
&lt;p&gt;在连接数据库之前，首先要加载想要连接的数据库的驱动到JVM（Java虚拟机）， 这通过java.lang.Class类的静态方法forName(String className)实现。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;例如：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;try{&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;//加载MySql的驱动类&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Class.forName(“com.mysql.jdbc.Driver”) ;&lt;br /&gt;
}catch(ClassNotFoundException e){&lt;br /&gt;
System.out.println(“找不到驱动程序类，加载驱动失败！”);&lt;br /&gt;
e.printStackTrace() ;&lt;br /&gt;
}&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;成功加载后，会将Driver类的实例注册到DriverManager类中;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;jdbcurl&quot;&gt;2.提供JDBC连接的URL&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;连接URL定义了连接数据库时的协议、子协议、数据源标识。&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;书写形式：协议：子协议：数据源标识&lt;br /&gt;
协议：在JDBC中总是以jdbc开始&lt;br /&gt;
子协议：是桥连接的驱动程序或是数据库管理系统名称。&lt;br /&gt;
数据源标识：标记找到数据库来源的地址与连接端口。&lt;br /&gt;
例如：（MySql的连接URL）&lt;br /&gt;
jdbc:mysql:&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;//localhost:3306/test?useUnicode=true&amp;amp;characterEncoding=gbk ;&lt;br /&gt;
useUnicode=true：表示使用Unicode字符集。如果characterEncoding设置为&lt;br /&gt;
gb2312或GBK，本参数必须设置为true 。characterEncoding=gbk：字符编码方式。&lt;br /&gt;
或者:
//”jdbc:mysql://localhost:3306/数据库名称?user=root&amp;amp;password=happy&amp;amp;useSSL=false”; &lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;section&quot;&gt;3、创建数据库的连接&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;要连接数据库，需要向java.sql.DriverManager请求并获得Connection对象， 该对象就代表一个数据库的连接。&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;使用DriverManager的getConnectin(String url,String username,String password )方法传入指定的欲连接的数据库的路径、数据库的用户名和 密码来获得。&lt;br /&gt;
例如：&lt;br /&gt;
try{&lt;br /&gt;
Connection con =DriverManager.getConnection(url , username , password ) ;&lt;br /&gt;
}catch(SQLException se){&lt;br /&gt;
System.out.println(“数据库连接失败！”);&lt;br /&gt;
se.printStackTrace() ;&lt;br /&gt;
}&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;statement&quot;&gt;4、创建一个Statement&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;要执行SQL语句，必须获得java.sql.Statement实例，Statement实例分为以下3 种类型：&lt;br /&gt;
1、执行静态SQL语句。通常通过Statement实例实现。&lt;br /&gt;
2、执行动态SQL语句。通常通过PreparedStatement实例实现。&lt;br /&gt;
3、执行数据库存储过程。通常通过CallableStatement实例实现。&lt;br /&gt;
具体的实现方式：&lt;br /&gt;
Statement stmt = con.createStatement() ;&lt;br /&gt;
PreparedStatementpstmt = con.prepareStatement(sql) ;&lt;br /&gt;
CallableStatementcstmt =con.prepareCall(“{CALL demoSp(? , ?)}”) ;&lt;br /&gt;
———————————————————————&lt;br /&gt;
//String sql=”insert student(id,name,sex) VALUES(?,?,?);”;&lt;br /&gt;
//ps = con.prepareStatement(sql);&lt;br /&gt;
//ps.setInt(1,id);&lt;br /&gt;
//ps.setString(2,name);&lt;br /&gt;
//ps.setString(3,sex);&lt;br /&gt;
//ps.executeUpdate();&lt;br /&gt;
或:&lt;br /&gt;
//st = con.createStatement();&lt;br /&gt;
//int num = st.executeUpdate(sql);&lt;br /&gt;
又或者:&lt;br /&gt;
//ss = st.executeQuery(sql1);//返回结果集&lt;br /&gt;
//while(ss.next()){&lt;br /&gt;
//System.out.println(&lt;br /&gt;
//ss.getInt(1)+”\t”+ss.getString(2)+”\t” + ss.getString(3));&lt;br /&gt;
//}&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sql&quot;&gt;5、执行SQL语句&lt;/h3&gt;
&lt;p&gt;Statement接口提供了三种执行SQL语句的方法：executeQuery、executeUpdate 和execute&lt;br /&gt;
1、ResultSetexecuteQuery(String sqlString)：执行查询数据库的SQL语句 ，返回一个结果集（ResultSet）对象。&lt;br /&gt;
2、intexecuteUpdate(String sqlString)：用于执行INSERT、UPDATE或&lt;br /&gt;
DELETE语句以及SQL DDL语句，如：CREATE TABLE和DROP TABLE等&lt;br /&gt;
3、execute(sqlString):用于执行返回多个结果集、多个更新计数或二者组合的 语句。&lt;br /&gt;
具体实现的代码：&lt;br /&gt;
ResultSetrs = stmt.executeQuery(“SELECT * FROM …”) ;&lt;br /&gt;
int rows = stmt.executeUpdate(“INSERT INTO …”) ;&lt;br /&gt;
boolean flag = stmt.execute(String sql) ;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;6、处理结果&lt;/h3&gt;
&lt;p&gt;两种情况：
1、执行更新返回的是本次操作影响到的记录数。&lt;br /&gt;
2、执行查询返回的结果是一个ResultSet对象。&lt;br /&gt;
•ResultSet包含符合SQL语句中条件的所有行，并且它通过一套get方法提供了对这些 行中数据的访问。&lt;br /&gt;
•使用结果集（ResultSet）对象的访问方法获取数据：&lt;br /&gt;
while(rs.next()){&lt;br /&gt;
String name = rs.getString(“name”) ;&lt;br /&gt;
String pass = rs.getString(1) ; // 此方法比较高效&lt;br /&gt;
}&lt;br /&gt;
（列是从左到右编号的，并且从列1开始）&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;jdbc-1&quot;&gt;7、关闭JDBC对象&lt;/h3&gt;

&lt;p&gt;操作完成以后要把所有使用的JDBC对象全都关闭，以释放JDBC资源，关闭顺序和声 明顺序相反：&lt;br /&gt;
1、关闭记录集&lt;br /&gt;
2、关闭声明&lt;br /&gt;
3、关闭连接对象&lt;br /&gt;
if(rs != null){ // 关闭记录集&lt;br /&gt;
try{&lt;br /&gt;
rs.close() ;&lt;br /&gt;
}catch(SQLException e){ e.printStackTrace() ; }&lt;br /&gt;
}&lt;br /&gt;
if(stmt != null){ // 关闭声明 try{&lt;br /&gt;
stmt.close() ;
}catch(SQLException e){ e.printStackTrace() ; }&lt;br /&gt;
}&lt;br /&gt;
if(conn != null){ // 关闭连接对象 try{&lt;br /&gt;
conn.close() ;&lt;br /&gt;
}catch(SQLException e){ e.printStackTrace() ; }&lt;br /&gt;
}&lt;br /&gt;
&lt;a href=&quot;http://blog.csdn.net/javaniuniu/article/details/52403509&quot;&gt;原文连接&lt;/a&gt;
为了方便学习而转载的如有不妥请作者联系我,我会尽快删除.&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Oct 2017 15:03:01 +0800</pubDate>
        <link>http://www.idearfree.com/java/2017/10/18/Java%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93.html</link>
        <guid isPermaLink="true">http://www.idearfree.com/java/2017/10/18/Java%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93.html</guid>
        
        <category>Java</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>CSS三种引用方式</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#css&quot; id=&quot;markdown-toc-css&quot;&gt;css的四种引入方式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;1.行内样式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;2.内嵌样式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;3.链接样式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;4.导入样式（不建议使用）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#css-1&quot; id=&quot;markdown-toc-css-1&quot;&gt;第二：四种CSS引入方式的优先级&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;css&quot;&gt;css的四种引入方式&lt;/h3&gt;

&lt;h3 id=&quot;section&quot;&gt;1.行内样式&lt;/h3&gt;

&lt;p&gt;最直接最简单的一种，直接对HTML标签使用style=”“，例如：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;p style=”color:#F00; “&amp;gt;&amp;lt;/p&amp;gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;缺点：HTML页面不纯净，文件体积大，不利于蜘蛛爬行，后期维护不方便。&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;2.内嵌样式&lt;/h3&gt;

&lt;p&gt;内嵌样式就是将CSS代码写在&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;之间，并且用&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;进行声明，例如：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;style type=”text/css”&amp;gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;body,div,a,img,p{margin:0; padding:0;}&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/style&amp;gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;优缺点：页面使用公共CSS代码，也是每个页面都要定义的，如果一个网站有很多页面，每个文件都会变大，后期维护难度也大，如果文件很少，CSS代码也不多，这种样式还是很不错的。&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;3.链接样式&lt;/h3&gt;

&lt;p&gt;链接样式是使用频率最高，最实用的样式，只需要在&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;之间加上&amp;lt;link…/&amp;gt;就可以了，如下：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;link type=”text/css” rel=”stylesheet” href=”style.css” /&amp;gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;优缺点：实现了页面框架代码与表现CSS代码的完全分离，使得前期制作和后期维护都十分方便&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;4.导入样式（不建议使用）&lt;/h3&gt;

&lt;p&gt;导入样式和链接样式比较相似，采用@import样式导入CSS样式表，在HTML初始化时，会被导入到HTML或者CSS文件中，成为文件的一部分，类似第二种内嵌样式。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;@import在html中使用，如下：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;style type=”text/css”&amp;gt;&lt;br /&gt;
@import url(style.css);&lt;br /&gt;
&amp;lt;/style&amp;gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;@import在CSS中使用，如下：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;@import url(style.css);&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;css-1&quot;&gt;第二：四种CSS引入方式的优先级&lt;/h3&gt;

&lt;p&gt;1.就近原则&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;2.理论上：行内&amp;gt;内嵌&amp;gt;链接&amp;gt;导入&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;3.实际上：内嵌、链接、导入在同一个文件头部，谁离相应的代码近，谁的优先级高&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/sweetyu/p/4954316.html&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 18 Oct 2017 14:03:01 +0800</pubDate>
        <link>http://www.idearfree.com/web/2017/10/18/CSS%E7%9A%84%E5%BC%95%E5%85%A5%E6%96%B9%E5%BC%8F.html</link>
        <guid isPermaLink="true">http://www.idearfree.com/web/2017/10/18/CSS%E7%9A%84%E5%BC%95%E5%85%A5%E6%96%B9%E5%BC%8F.html</guid>
        
        <category>CSS</category>
        
        
        <category>WEB</category>
        
      </item>
    
      <item>
        <title>JavaScript三种引用方式</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;1.事件定义(行内)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;2.直接嵌入式(内部)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;3.文件调用(外部)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;1.事件定义(行内)&lt;/h3&gt;

&lt;p&gt;&amp;lt;onclick=”JS代码”&amp;gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;2.直接嵌入式(内部)&lt;/h3&gt;

&lt;p&gt;&amp;lt;script type=”text/javascript”&amp;gt;&lt;br /&gt;
 JS代码&lt;br /&gt;
&amp;lt;/script&amp;gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;3.文件调用(外部)&lt;/h3&gt;

&lt;p&gt;&amp;lt;script type=”text/javascript” src=”js文件地址”&amp;gt;&lt;br /&gt;
&amp;lt;/script&amp;gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 18 Oct 2017 13:03:01 +0800</pubDate>
        <link>http://www.idearfree.com/web/2017/10/18/js%E4%B8%89%E7%A7%8D%E5%BC%95%E7%94%A8%E6%96%B9%E5%BC%8F.html</link>
        <guid isPermaLink="true">http://www.idearfree.com/web/2017/10/18/js%E4%B8%89%E7%A7%8D%E5%BC%95%E7%94%A8%E6%96%B9%E5%BC%8F.html</guid>
        
        <category>JavaScript</category>
        
        
        <category>WEB</category>
        
      </item>
    
      <item>
        <title>python基础总结</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#if&quot; id=&quot;markdown-toc-if&quot;&gt;if语句&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;if&quot;&gt;if语句&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if 2 &amp;lt; 3:&lt;/code&gt; 
&lt;code class=&quot;highlighter-rouge&quot;&gt;elif 2 &amp;gt; 3:&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;else:&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 09 Aug 2017 18:13:01 +0800</pubDate>
        <link>http://www.idearfree.com/python/2017/08/09/python.html</link>
        <guid isPermaLink="true">http://www.idearfree.com/python/2017/08/09/python.html</guid>
        
        <category>python</category>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>处理异常!</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#trycatch&quot; id=&quot;markdown-toc-trycatch&quot;&gt;try…catch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#throws&quot; id=&quot;markdown-toc-throws&quot;&gt;throws&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#finally&quot; id=&quot;markdown-toc-finally&quot;&gt;finally&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;trycatch&quot;&gt;try…catch&lt;/h3&gt;
&lt;p&gt;普通异常处理&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;try{&lt;/code&gt;&lt;br /&gt;
    &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out.print(3/0);&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;catch(Exception e){&lt;/code&gt; &lt;br /&gt;
    &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out.print(&quot;除数不能为零&quot;);&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;throws&quot;&gt;throws&lt;/h3&gt;
&lt;p&gt;严重或无法预料异常时使用抛异常&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;try{&lt;/code&gt;&lt;br /&gt;
    &lt;code class=&quot;highlighter-rouge&quot;&gt;function();&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;catch(Exception e){&lt;/code&gt; &lt;br /&gt;
    &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out.print(&quot;除数不能为零&quot;);&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void function() throws Exception{&lt;/code&gt;&lt;br /&gt;
    &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out.print(3/0);&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;finally&quot;&gt;finally&lt;/h3&gt;
&lt;p&gt;放在try…catch后面,无论是否出现异常都会执行,控制程序走向.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;try{&lt;/code&gt;&lt;br /&gt;
    &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out.print(3/0);&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;catch(Exception e){&lt;/code&gt; &lt;br /&gt;
    &lt;code class=&quot;highlighter-rouge&quot;&gt;System.out.print(&quot;除数不能为零&quot;);&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;finally{&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;System.out.println(&quot;程序执行完毕&quot;);&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 07 Aug 2017 13:03:01 +0800</pubDate>
        <link>http://www.idearfree.com/java/2017/08/07/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html</link>
        <guid isPermaLink="true">http://www.idearfree.com/java/2017/08/07/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html</guid>
        
        <category>Java</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>为FireFox安装Flash</title>
        <description>
&lt;ol&gt;
  &lt;li&gt;查看/usr/lib目录下是否有mozilla目录(没有了就创建)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo mkdir -p /usr/lib/mozilla/plugins&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;把下载的的flash.gar.gz的找个地方解压一下
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tar -zxvf flash_player_npapi_linux.x86_64.tar.gz&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;把解压后的libflashplayer.so复制到刚才创建的目录下
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo cp ./libflashplayer /usr/lib/mozilla/plugins&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;然后查看FireFox的附加插件-插件中就会多出一个Shockwave Flash.
后边调成永久启用就行了&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Aug 2017 11:18:00 +0800</pubDate>
        <link>http://www.idearfree.com/linux/2017/08/07/%E4%B8%BAFireFox%E5%AE%89%E8%A3%85Flash.html</link>
        <guid isPermaLink="true">http://www.idearfree.com/linux/2017/08/07/%E4%B8%BAFireFox%E5%AE%89%E8%A3%85Flash.html</guid>
        
        <category>Linux</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>汇编语言知识基础!</title>
        <description>
&lt;ol&gt;
  &lt;li&gt;机器语言是机器指令的集合(通过把二进制数转为高低电平来运行)&lt;/li&gt;
  &lt;li&gt;CPU(Central Processing Unit)中央处理单元&lt;/li&gt;
  &lt;li&gt;汇编语言由三类指令组成
    &lt;ol&gt;
      &lt;li&gt;汇编指令:机器码的助记符&lt;/li&gt;
      &lt;li&gt;伪指令:由编译器执行,计算机不执行&lt;/li&gt;
      &lt;li&gt;其它符号: +, -, *, /,由编译器执行&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;8 bit = 1 Byte 即:8位 = 1 字节
    &lt;ol&gt;
      &lt;li&gt;1024Byte = 1KB, 1024KB = 1MB, 1024MB = 1GB, 1024GB = 1TB&lt;/li&gt;
      &lt;li&gt;存储器被分为多个存储单元,每个单元被分配一个编号(从零开始)&lt;/li&gt;
      &lt;li&gt;微型机的存储单元,一个存储单元可存放1Byte(字节) = 8bit(位)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;CPU对数据进行读写(必须和芯片进行下面3类信息交互)
    &lt;ol&gt;
      &lt;li&gt;存储单元的地址(地址信息)&lt;/li&gt;
      &lt;li&gt;器件的选择,读或写的命令(控制信息)&lt;/li&gt;
      &lt;li&gt;读或写的数据(数据信息)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;CPU和其它芯片通过导线来传输信息(我们通常叫做总线)
    &lt;ol&gt;
      &lt;li&gt;总线从逻辑上分为3类:
        &lt;ol&gt;
          &lt;li&gt;地址总线&lt;/li&gt;
          &lt;li&gt;控制总线&lt;/li&gt;
          &lt;li&gt;数据总线&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;一根总线只能传送两种信息0/1(总线的根数我们叫做宽度)&lt;/li&gt;
      &lt;li&gt;地址总线的宽度(N)决定了CPU的寻址能力(2^N)&lt;/li&gt;
      &lt;li&gt;数据总线的宽度(N)决定了CPU与外界的数据传输速度
        &lt;ol&gt;
          &lt;li&gt;1根总线的传输能力为 1bit(1位) 8根为1字节&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;控制总线决定CPU对外部器件的控制不同器件的能力&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;小结
    &lt;ol&gt;
      &lt;li&gt;汇编指令是机器指令的助记符,同机器指令一一对应.&lt;/li&gt;
      &lt;li&gt;每一种CPU都有自己的汇编指令集.&lt;/li&gt;
      &lt;li&gt;CPU可以直接使用的信息在存储器中存放.&lt;/li&gt;
      &lt;li&gt;在存储器中指令和数据没有任何区别,都是二进制信息.&lt;/li&gt;
      &lt;li&gt;存储单元从零开始顺序存储8个bit, 即8位二进制数.&lt;/li&gt;
      &lt;li&gt;每一个CPU芯片都有许多管脚,这些管脚和总线相连.也可以说,
这些管脚引出总线.一个CPU可以引出3中总线的宽度标志了这个CPU的不同方面的性能.
        &lt;ol&gt;
          &lt;li&gt;地址总线决定CUP寻址能力&lt;/li&gt;
          &lt;li&gt;数据总线决定CPU与其它器件进行数据禅送是的一次数据禅送量;&lt;/li&gt;
          &lt;li&gt;控制总线决定CUP对系统中其他器件的控制能力&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;下面的需了解更多可自行Google
    &lt;ol&gt;
      &lt;li&gt;内存地址空间&lt;/li&gt;
      &lt;li&gt;比如CPU的地址总线宽度为10,那么寻址能力就为1024&lt;/li&gt;
      &lt;li&gt;这1024个可寻到的内存单元就构成了这个CPU的内存地址空间&lt;/li&gt;
      &lt;li&gt;超出寻址能力的内存就无法使用了&lt;/li&gt;
      &lt;li&gt;主板, CPU通过主板和总线来控制一系列扩展器件&lt;/li&gt;
      &lt;li&gt;接口卡:计算机系统中所有可用程序控制其工作的设备,必须收到CPU的控制.&lt;/li&gt;
      &lt;li&gt;各类存储芯片&lt;/li&gt;
      &lt;li&gt;随机存储器(RAM):用于存放供CPU使用的绝大部分程序和数据&lt;/li&gt;
      &lt;li&gt;BOIS(Basic Input/Output System)基本 输入/输出 系统.
        &lt;ol&gt;
          &lt;li&gt;BOIS是由主板和各类接口卡厂商提供的元件系统&lt;/li&gt;
          &lt;li&gt;可以通过它利用该硬件设备进行最基本的输入输出&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;接口卡上的RAM
        &lt;ol&gt;
          &lt;li&gt;某些接口卡需要对大批量输入输出数据进行暂时存储,
在其上装有RAM,最典型的就是显卡(显卡越大对外显示的内容就越多越快).&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PC机中各类存储器的逻辑连接
&lt;img src=&quot;/styles/images/PC.jpg&quot; alt=&quot;PC机中各类存储器的逻辑连接&quot; /&gt;
将各类存储其看作一个逻辑存储器
&lt;img src=&quot;/styles/images/PC1.jpg&quot; alt=&quot;将各类存储其看作一个逻辑存储器&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 06 Aug 2017 21:03:01 +0800</pubDate>
        <link>http://www.idearfree.com/assembly/language/2017/08/06/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80.html</link>
        <guid isPermaLink="true">http://www.idearfree.com/assembly/language/2017/08/06/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80.html</guid>
        
        <category>Assembly Language</category>
        
        
        <category>Assembly</category>
        
        <category>Language</category>
        
      </item>
    
      <item>
        <title>python基础总结(一)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;1.变量和简单的数据类型&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;2.列表&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;3.操作列表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;1.变量和简单的数据类型&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;变量
    &lt;ol&gt;
      &lt;li&gt;在程序中可以随时修改变量的值,而python始终记录最新值&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;变量和命名的使用
    &lt;ol&gt;
      &lt;li&gt;变量名只能包含字母,数字和下划线(不能以数字开头)&lt;/li&gt;
      &lt;li&gt;不要将python的关键字和函数名作为变量名&lt;/li&gt;
      &lt;li&gt;书写具有描述性的变量名&lt;/li&gt;
      &lt;li&gt;慎用 I 和 O&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;字符串
    &lt;ol&gt;
      &lt;li&gt;用引号引起来的都为字符串&lt;/li&gt;
      &lt;li&gt;obj.title()将单词首字母大写&lt;/li&gt;
      &lt;li&gt;通过 ‘+’ 来使两个字符串合并&lt;/li&gt;
      &lt;li&gt;obj.upper(),lower()将字符串分别转为大,小写&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;删除空白
    &lt;ol&gt;
      &lt;li&gt;obj.strip(), lstrip(), rstrip()删除两端,左边(left),右边(right)空白&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;python2 中的print语句
 1.print “Hello my friend!” 不用添加括号也行
6.运算符号
 1.python2 中 3/2.0 与 python3中 3/2 相同,结果为1.5
 2.python中支持乘方 3**2 即 3的2次方
7.使用函数str()避免错误类型
 1.可通过str(obj),来将非字符串类型转为字符串类型
8.注释
    &lt;ol&gt;
      &lt;li&gt;’#’pyton注释用井号来标识
9.Python之禅
 1.import this(代码书写原则)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-1&quot;&gt;2.列表&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;列表介绍
    &lt;ol&gt;
      &lt;li&gt;python中用’[]’来表示列表(即为动态列表)&lt;/li&gt;
      &lt;li&gt;通过 list[index] 来访问元素(-1为倒数第一个元素)&lt;/li&gt;
      &lt;li&gt;列表中的元素都是字符串&lt;/li&gt;
      &lt;li&gt;list.append(varlue)在列表末尾添加值&lt;/li&gt;
      &lt;li&gt;list.insert(0,varlue)在指定位置添加值&lt;/li&gt;
      &lt;li&gt;del list[index] 删除索引位置的值&lt;/li&gt;
      &lt;li&gt;value = list.pop(index)弹出末尾或任意位置元素&lt;/li&gt;
      &lt;li&gt;list.remove(value)根据值来删除列表中该元素(只能删除一个)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;组织列表
    &lt;ol&gt;
      &lt;li&gt;list.sort()对列表进行永久排序&lt;/li&gt;
      &lt;li&gt;‘reverse=True’ sort的参数(倒序)&lt;/li&gt;
      &lt;li&gt;list.sorted() 对列表进行临时排序&lt;/li&gt;
      &lt;li&gt;len(list) 确认列表长度&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-2&quot;&gt;3.操作列表&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;遍历列表,切片
    &lt;ol&gt;
      &lt;li&gt;for value in list:(通过for循环索引列表值)&lt;/li&gt;
      &lt;li&gt;python中注意缩进&lt;/li&gt;
      &lt;li&gt;for value in range(1,5)生成一系列数字&lt;/li&gt;
      &lt;li&gt;range(5),从0-4(自行理解),range(1,10,2)开始,结束,步距(自行理解)&lt;/li&gt;
      &lt;li&gt;numbers = list(range(1,6))(生成数字列表)&lt;/li&gt;
      &lt;li&gt;list(),生成列表&lt;/li&gt;
      &lt;li&gt;squares = [value**2, for value in range(1, 6)]列表解析&lt;/li&gt;
      &lt;li&gt;[:] 为切片,for value in list[0:3],循环输出列表中下标0-2的元素&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;复制列表
    &lt;ol&gt;
      &lt;li&gt;list1 = list2&lt;a href=&quot;使用切片会复制列表&quot;&gt;:&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;list1 = list2 (会创建list1第副本,即list2与1的内存地址相同)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;元组
    &lt;ol&gt;
      &lt;li&gt;元组用’()’(即为静态列表,只能在定义时添加值,不能进行添加删除操作)&lt;/li&gt;
      &lt;li&gt;遍历元组,根列表遍历时相同&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;python小知识
    &lt;ol&gt;
      &lt;li&gt;PEP(Python Enhancement Proposal)代码格式设置指南PEP8元老啊&lt;/li&gt;
      &lt;li&gt;缩进,每级缩进为4个空格&lt;/li&gt;
      &lt;li&gt;行长,每行建议不超过80个字符,注释不超过72个字符&lt;/li&gt;
      &lt;li&gt;更多了解请访问&lt;a href=&quot;https://python.org/dev/peps/pep-0008/&quot;&gt;PEP8格式指南&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 06 Aug 2017 18:13:01 +0800</pubDate>
        <link>http://www.idearfree.com/python/2017/08/06/%E5%AF%B9python%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93.html</link>
        <guid isPermaLink="true">http://www.idearfree.com/python/2017/08/06/%E5%AF%B9python%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93.html</guid>
        
        <category>python</category>
        
        
        <category>python</category>
        
      </item>
    
  </channel>
</rss>
